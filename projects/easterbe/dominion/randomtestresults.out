Random Test: "smithy" card results:

FAILURE IN TEST #0:
FAIL: handCount: handCount: 148/--> expect + 3 - 1: 149
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (114) + discardCount(233) = 347
After: --> expect three less than before: deckCount (112) + discardCount(233) = 345

FAILURE IN TEST #1:
FAIL: handCount: handCount: 50/--> expect + 3 - 1: 51
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (352) + discardCount(274) = 626
After: --> expect three less than before: deckCount (350) + discardCount(274) = 624

FAILURE IN TEST #2:
FAIL: handCount: handCount: 116/--> expect + 3 - 1: 117
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (270) + discardCount(258) = 528
After: --> expect three less than before: deckCount (268) + discardCount(258) = 526

FAILURE IN TEST #3:
FAIL: handCount: handCount: 149/--> expect + 3 - 1: 150
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (30) + discardCount(58) = 88
After: --> expect three less than before: deckCount (28) + discardCount(58) = 86

FAILURE IN TEST #4:
FAIL: handCount: handCount: 182/--> expect + 3 - 1: 183
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (177) + discardCount(78) = 255
After: --> expect three less than before: deckCount (175) + discardCount(78) = 253

FAILURE IN TEST #5:
FAIL: handCount: handCount: 80/--> expect + 3 - 1: 81
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (460) + discardCount(71) = 531
After: --> expect three less than before: deckCount (458) + discardCount(71) = 529

FAILURE IN TEST #6:
FAIL: handCount: handCount: 88/--> expect + 3 - 1: 89
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (228) + discardCount(375) = 603
After: --> expect three less than before: deckCount (226) + discardCount(375) = 601

FAILURE IN TEST #7:
FAIL: handCount: handCount: 9/--> expect + 3 - 1: 10
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (174) + discardCount(362) = 536
After: --> expect three less than before: deckCount (172) + discardCount(362) = 534

FAILURE IN TEST #8:
FAIL: handCount: handCount: 25/--> expect + 3 - 1: 26
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (441) + discardCount(149) = 590
After: --> expect three less than before: deckCount (439) + discardCount(149) = 588

FAILURE IN TEST #9:
FAIL: handCount: handCount: 15/--> expect + 3 - 1: 16
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (441) + discardCount(286) = 727
After: --> expect three less than before: deckCount (439) + discardCount(286) = 725

FAILURE IN TEST #10:
FAIL: handCount: handCount: 26/--> expect + 3 - 1: 27
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (388) + discardCount(26) = 414
After: --> expect three less than before: deckCount (386) + discardCount(26) = 412

FAILURE IN TEST #11:
FAIL: handCount: handCount: 146/--> expect + 3 - 1: 147
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (411) + discardCount(316) = 727
After: --> expect three less than before: deckCount (409) + discardCount(316) = 725

FAILURE IN TEST #12:
FAIL: handCount: handCount: 5/--> expect + 3 - 1: 6
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (490) + discardCount(6) = 496
After: --> expect three less than before: deckCount (488) + discardCount(6) = 494

FAILURE IN TEST #13:
FAIL: handCount: handCount: 179/--> expect + 3 - 1: 180
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (283) + discardCount(408) = 691
After: --> expect three less than before: deckCount (281) + discardCount(408) = 689

FAILURE IN TEST #14:
FAIL: handCount: handCount: 117/--> expect + 3 - 1: 118
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (352) + discardCount(182) = 534
After: --> expect three less than before: deckCount (350) + discardCount(182) = 532

FAILURE IN TEST #15:
FAIL: handCount: handCount: 178/--> expect + 3 - 1: 179
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (445) + discardCount(315) = 760
After: --> expect three less than before: deckCount (443) + discardCount(315) = 758

FAILURE IN TEST #16:
FAIL: handCount: handCount: 79/--> expect + 3 - 1: 80
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (300) + discardCount(187) = 487
After: --> expect three less than before: deckCount (298) + discardCount(187) = 485

FAILURE IN TEST #17:
FAIL: handCount: handCount: 67/--> expect + 3 - 1: 68
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (252) + discardCount(112) = 364
After: --> expect three less than before: deckCount (250) + discardCount(112) = 362

FAILURE IN TEST #18:
FAIL: handCount: handCount: 47/--> expect + 3 - 1: 48
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (262) + discardCount(134) = 396
After: --> expect three less than before: deckCount (260) + discardCount(134) = 394

FAILURE IN TEST #19:
FAIL: handCount: handCount: 51/--> expect + 3 - 1: 52
FAIL: non-hand card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (489) + discardCount(348) = 837
After: --> expect three less than before: deckCount (487) + discardCount(348) = 835

Random Testing of "Smithy" Card Complete
(NOTE: only failed tests and states printed in results; if no stated failures, all tests passed)

Function 'updateCoins'
Lines executed:0.00% of 11
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:4.19% of 215
Branches executed:13.23% of 189
Taken at least once:2.12% of 189
Calls executed:3.45% of 58

Function 'greatHallEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'adventurerEffect'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:0.00% of 16
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 2

Function 'initializeGame'
Lines executed:0.00% of 62
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
Calls executed:0.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:0.00% of 6
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:6.16% of 568
Branches executed:8.20% of 427
Taken at least once:2.34% of 427
Calls executed:4.21% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
        -:  231:
        -:  232://Liz asks a QUESTION: why does playCard return anything? The int code isn't used in playdom.c so...?
        -:  233://...shouldn't playdom.c be error checking the status of playCard? If playCard fails, it should also fail... yes?
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
call    0 never executed
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  271:	
    #####:  272:  return 0;
        -:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
        -:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  349:int whoseTurn(struct gameState *state) {
       20:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
        -:  353://LIZ ASKS A QUESTION: So... in the rules of the real Dominion, cards which are in your hand and cards you played but did not trash
        -:  354://all go into your discard pile at the end of a turn. So why am I only seeing the hand at the end of the turn going into discards here?
        -:  355://What is the point of having the played card deck if all it does is sit there? Is that an error or are played cards never allowed to
        -:  356://re-enter circulation in your deck in this version of the game? (If so then why bother with the distinction of trash vs not trash?)
        -:  357://(Try ctrl-f "playedCard" and you'll see that at no place does that played pile ever re-enter circulation)
        -:  358:
        -:  359://ALSO, technically in the rules for Dominion, the player draws their new hand at the end of their turn, not after the
        -:  360://next person finishes their turn, as is represented by the code below.
        -:  361:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  402:int isGameOver(struct gameState *state) {
        -:  403:  int i;
        -:  404:  int j;
        -:  405:	
        -:  406:  //if stack of Province cards is empty, the game ends
    #####:  407:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:    {
    #####:  409:      return 1;
        -:  410:    }
        -:  411:
        -:  412:  //if three supply pile are at 0, the game ends
    #####:  413:  j = 0;
    #####:  414:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  415:    {
    #####:  416:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  417:	{
    #####:  418:	  j++;
        -:  419:	}
        -:  420:    }
    #####:  421:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      return 1;
        -:  424:    }
        -:  425:
    #####:  426:  return 0;
        -:  427:}
        -:  428:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  429:int scoreFor (int player, struct gameState *state) {
        -:  430:
        -:  431:  int i;
    #####:  432:  int score = 0;
        -:  433:  //score from hand
    #####:  434:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from discard
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  446:    {
    #####:  447:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  453:    }
        -:  454:
        -:  455:  //score from deck
    #####:  456:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:    {
    #####:  458:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  459:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  460:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  461:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  462:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  463:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  464:    }
        -:  465:
    #####:  466:  return score;
        -:  467:}
        -:  468:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  469:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  470:  int i;	
        -:  471:  int j;
        -:  472:  int highScore;
        -:  473:  int currentPlayer;
        -:  474:
        -:  475:  //get score for each player
    #####:  476:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  477:    {
        -:  478:      //set unused player scores to -9999
    #####:  479:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:	  players[i] = -9999;
        -:  482:	}
        -:  483:      else
        -:  484:	{
    #####:  485:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  486:	}
        -:  487:    }
        -:  488:
        -:  489:  //find highest score
    #####:  490:  j = 0;
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  494:	{
    #####:  495:	  j = i;
        -:  496:	}
        -:  497:    }
    #####:  498:  highScore = players[j];
        -:  499:
        -:  500:  //add 1 to players who had less turns
    #####:  501:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  505:	{
    #####:  506:	  players[i]++;
        -:  507:	}
        -:  508:    }
        -:  509:
        -:  510:  //find new highest score
    #####:  511:  j = 0;
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  j = i;
        -:  517:	}
        -:  518:    }
    #####:  519:  highScore = players[j];
        -:  520:
        -:  521:  //set winners in array to 1 and rest to 0
    #####:  522:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  525:	{
    #####:  526:	  players[i] = 1;
        -:  527:	}
        -:  528:      else
        -:  529:	{
    #####:  530:	  players[i] = 0;
        -:  531:	}
        -:  532:    }
        -:  533:
    #####:  534:  return 0;
        -:  535:}
        -:  536:
function drawCard called 40 returned 100% blocks executed 38%
       40:  537:int drawCard(int player, struct gameState *state)
        -:  538:{	int count;
        -:  539:  int deckCounter;
       40:  540:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  541:    
        -:  542:    //Step 1 Shuffle the discard pile back into a deck
        -:  543:    int i;
        -:  544:    //Move discard to deck
    #####:  545:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  546:      state->deck[player][i] = state->discard[player][i];
    #####:  547:      state->discard[player][i] = -1;
        -:  548:    }
        -:  549:
    #####:  550:    state->deckCount[player] = state->discardCount[player];
    #####:  551:    state->discardCount[player] = 0;//Reset discard
        -:  552:
        -:  553:    //Shufffle the deck
    #####:  554:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  555:   
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  558:    }
        -:  559:    
    #####:  560:    state->discardCount[player] = 0;
        -:  561:
        -:  562:    //Step 2 Draw Card
    #####:  563:    count = state->handCount[player];//Get current player's hand count
        -:  564:    
        -:  565:    if (DEBUG){//Debug statements
        -:  566:      printf("Current hand count: %d\n", count);
        -:  567:    }
        -:  568:    
    #####:  569:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  570:
    #####:  571:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  572:      return -1;
        -:  573:
    #####:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  575:    state->deckCount[player]--;
    #####:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
        -:  579:  else{
       40:  580:    int count = state->handCount[player];//Get current hand count for player
        -:  581:    int deckCounter;
        -:  582:    if (DEBUG){//Debug statements
        -:  583:      printf("Current hand count: %d\n", count);
        -:  584:    }
        -:  585:
       40:  586:    deckCounter = state->deckCount[player];//Create holder for the deck count
       40:  587:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       40:  588:    state->deckCount[player]--;
       40:  589:    state->handCount[player]++;//Increment hand count
        -:  590:  }
        -:  591:
       40:  592:  return 0;
        -:  593:}
        -:  594:
function getCost called 0 returned 0% blocks executed 0%
    #####:  595:int getCost(int cardNumber)
        -:  596:{
    #####:  597:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  598:    {
        -:  599:    case curse:
    #####:  600:      return 0;
        -:  601:    case estate:
    #####:  602:      return 2;
        -:  603:    case duchy:
    #####:  604:      return 5;
        -:  605:    case province:
    #####:  606:      return 8;
        -:  607:    case copper:
    #####:  608:      return 0;
        -:  609:    case silver:
    #####:  610:      return 3;
        -:  611:    case gold:
    #####:  612:      return 6;
        -:  613:    case adventurer:
    #####:  614:      return 6;
        -:  615:    case council_room:
    #####:  616:      return 5;
        -:  617:    case feast:
    #####:  618:      return 4;
        -:  619:    case gardens:
    #####:  620:      return 4;
        -:  621:    case mine:
    #####:  622:      return 5;
        -:  623:    case remodel:
    #####:  624:      return 4;
        -:  625:    case smithy:
    #####:  626:      return 4;
        -:  627:    case village:
    #####:  628:      return 3;
        -:  629:    case baron:
    #####:  630:      return 4;
        -:  631:    case great_hall:
    #####:  632:      return 3;
        -:  633:    case minion:
    #####:  634:      return 5;
        -:  635:    case steward:
    #####:  636:      return 3;
        -:  637:    case tribute:
    #####:  638:      return 5;
        -:  639:    case ambassador:
    #####:  640:      return 3;
        -:  641:    case cutpurse:
    #####:  642:      return 4;
        -:  643:    case embargo: 
    #####:  644:      return 2;
        -:  645:    case outpost:
    #####:  646:      return 5;
        -:  647:    case salvager:
    #####:  648:      return 4;
        -:  649:    case sea_hag:
    #####:  650:      return 4;
        -:  651:    case treasure_map:
    #####:  652:      return 4;
        -:  653:    }
        -:  654:	
    #####:  655:  return -1;
        -:  656:}
        -:  657:
        -:  658://REFACTORED IN ASSIGMENT 2; called in cardEffect (switch: case: smithy)
        -:  659://(Bug may have been added in ASSIGNMENT 2; see assigment 2 documentation)
function smithyEffect called 20 returned 100% blocks executed 100%
       20:  660:int smithyEffect(int currentPlayer, int handPos, struct gameState* state)
        -:  661:{
        -:  662:	//+3 Card
        -:  663:	int i;
       60:  664:	for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  665:	{
       40:  666:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  667:	}
        -:  668:
        -:  669:	//discard card from hand
       20:  670:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  671:
       20:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675://REFACTORED IN ASSIGMENT 2; called in cardEffect (switch: case: adventurer)
        -:  676://(Bug may have been added in ASSIGNMENT 2; see assigment 2 documentation)
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  677:int adventurerEffect(int currentPlayer, int handPos, struct gameState* state)
        -:  678:{
        -:  679:	//(refactor: declare (int)cardDrawn, (int) drawnTreasure, (int) temphand[MAX_HAND], (int) z [for temp hand] in this context)
        -:  680:	int cardDrawn;
    #####:  681:	int drawntreasure = 0;
    #####:  682:	int z = 0; //counter for temp hand;
        -:  683:	int temphand[MAX_HAND];
        -:  684:
    #####:  685:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  686:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  687:			shuffle(currentPlayer, state);
call    0 never executed
        -:  688:		}
    #####:  689:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  690:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  691:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  692:			drawntreasure++;
        -:  693:		else {
    #####:  694:			temphand[z] = cardDrawn;
    #####:  695:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  696:			z++;
        -:  697:		}
        -:  698:	}
    #####:  699:	while (z - 1 > 0) {
branch  0 never executed
branch  1 never executed
    #####:  700:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  701:		z = z - 1;
        -:  702:	}
    #####:  703:	return 0;
        -:  704:}
        -:  705:
        -:  706://REFACTORED IN ASSIGMENT 2; called in cardEffect (switch: case: village)
        -:  707://(Bug may have been added in ASSIGNMENT 2; see assigment 2 documentation)
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  708:int villageEffect(int currentPlayer, int handPos, struct gameState* state)
        -:  709:{
        -:  710:	//+1 Card
    #####:  711:	drawCard(currentPlayer, state);
call    0 never executed
        -:  712:
        -:  713:	//+2 Actions
    #####:  714:	state->numActions = state->numActions + 2;
        -:  715:
        -:  716:	//discard played card from hand
    #####:  717:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  718:	return 0;
        -:  719:}
        -:  720:
        -:  721://REFACTORED IN ASSIGMENT 2; called in cardEffect (switch: case: village)
        -:  722://(Bug may have been added in ASSIGNMENT 2; see assigment 2 documentation)
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  723:int councilRoomEffect(int currentPlayer, int handPos, struct gameState* state)
        -:  724:{
        -:  725:	//+4 Cards
        -:  726:	int i;
    #####:  727:	for (i = 0; i < 5; i++)
branch  0 never executed
branch  1 never executed
        -:  728:	{
    #####:  729:		drawCard(currentPlayer, state);
call    0 never executed
        -:  730:	}
        -:  731:
        -:  732:	//+1 Buy
    #####:  733:	state->numBuys++;
        -:  734:
        -:  735:	//Each other player draws a card
    #####:  736:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  737:	{
    #####:  738:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  739:		{
    #####:  740:			drawCard(i, state);
call    0 never executed
        -:  741:		}
        -:  742:	}
        -:  743:
        -:  744:	//put played card in played card pile
    #####:  745:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  746:
    #####:  747:	return 0;
        -:  748:}
        -:  749:
        -:  750://REFACTORED IN ASSIGMENT 2; called in cardEffect (switch: case: greatHall)
        -:  751://(Bug may have been added in ASSIGNMENT 2; see assigment 2 documentation)
function greatHallEffect called 0 returned 0% blocks executed 0%
    #####:  752:int greatHallEffect(int currentPlayer, int handPos, struct gameState* state)
        -:  753:{
        -:  754:	//+1 Card
    #####:  755:	drawCard(currentPlayer, state);
call    0 never executed
        -:  756:
        -:  757:	//+1 Actions
    #####:  758:	state->numActions++;
        -:  759:
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  762:	return 0;
        -:  763:}
        -:  764:
        -:  765:
function cardEffect called 20 returned 100% blocks executed 4%
       20:  766:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  767:{
        -:  768:  int i;
        -:  769:  int j;
        -:  770:  int k;
        -:  771:  int x;
        -:  772:  int index;
       20:  773:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  774:  int nextPlayer = currentPlayer + 1;
        -:  775:
       20:  776:  int tributeRevealedCards[2] = {-1, -1};
        -:  777:  int temphand[MAX_HAND];// moved above the if statement
        -:  778:  //int drawntreasure=0;										//ONLY USED IN adventurer; RETAINED after refactoring, but inactive to avoid compiler warnings
        -:  779:  //int cardDrawn;											//ONLY USED IN adventurer; RETAINED after refactoring, but inactive to avoid compiler warnings
        -:  780:  //int z = 0;// this is the counter for the temp hand		//ONLY USED IN adventurer; RETAINED after refactoring, but inactive to avoid compiler warnings
       20:  781:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        8:  782:    nextPlayer = 0;
        -:  783:  }
        -:  784:  
        -:  785:	
        -:  786:  //uses switch to select card and perform actions
       20:  787:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  788:    {
        -:  789:    case adventurer:
        -:  790:		//refactored: call adventurerEffect(int currentPlayer, int handPos, struct gameState* state)
    #####:  791:		if (adventurerEffect(currentPlayer, handPos, state) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  792:		{
    #####:  793:			return -1;
        -:  794:		}
        -:  795:		else
        -:  796:		{
    #####:  797:			return 0;
        -:  798:		}
        -:  799:
        -:  800:	case council_room:
        -:  801:		//+4 Cards
        -:  802:		//refactored: call councilRoomEffect(int currentPlayer, int handPos, struct gameState* state)
    #####:  803:		if (councilRoomEffect(currentPlayer, handPos, state) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:		{
    #####:  805:			return -1;
        -:  806:		}
        -:  807:		else
        -:  808:		{
    #####:  809:			return 0;
        -:  810:		}
        -:  811:			
        -:  812:    case feast:
        -:  813:      //gain card with cost up to 5
        -:  814:      //Backup hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  816:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  817:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  818:      }
        -:  819:      //Backup hand
        -:  820:
        -:  821:      //Update Coins for Buy
    #####:  822:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  823:      x = 1;//Condition to loop on
    #####:  824:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  825:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  826:	  if (DEBUG)
        -:  827:	    printf("None of that card left, sorry!\n");
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  831:	  }
        -:  832:	}
    #####:  833:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  834:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  838:	  }
        -:  839:	}
        -:  840:	else{
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
    #####:  846:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  847:	  x = 0;//No more buying cards
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:	  }
        -:  852:
        -:  853:	}
        -:  854:      }     
        -:  855:
        -:  856:      //Reset Hand
    #####:  857:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  858:	state->hand[currentPlayer][i] = temphand[i];
    #####:  859:	temphand[i] = -1;
        -:  860:      }
        -:  861:      //Reset Hand
        -:  862:      			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case gardens:
    #####:  866:      return -1;
        -:  867:			
        -:  868:    case mine:
    #####:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
    #####:  871:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:		
    #####:  876:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:
    #####:  886:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  887:
        -:  888:      //discard card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  890:
        -:  891:      //discard trashed card
    #####:  892:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  893:	{
    #####:  894:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  897:	      break;
        -:  898:	    }
        -:  899:	}
        -:  900:			
    #####:  901:      return 0;
        -:  902:			
        -:  903:    case remodel:
    #####:  904:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  907:	{
    #####:  908:	  return -1;
        -:  909:	}
        -:  910:
    #####:  911:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  915:
        -:  916:      //discard trashed card
    #####:  917:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  918:	{
    #####:  919:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  920:	    {
    #####:  921:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  922:	      break;
        -:  923:	    }
        -:  924:	}
        -:  925:
        -:  926:
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case smithy:
        -:  930:		//refactored: call smithyEffect(int currentPlayer, int handPos, struct gameState* state)
       20:  931:		if (smithyEffect(currentPlayer, handPos, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  932:		{
    #####:  933:			return -1;
        -:  934:		}
        -:  935:		else
        -:  936:		{
       20:  937:			return 0;
        -:  938:		}
        -:  939:	
        -:  940:    case village:
        -:  941:      //+1 Card
        -:  942:	  //refactored: call villageEffect(int currentPlayer, int handPos, struct gameState* state) 
    #####:  943:		if (villageEffect(currentPlayer, handPos, state) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:		else
        -:  948:		{
    #####:  949:			return 0;
        -:  950:		}
        -:  951:		
        -:  952:    case baron:
    #####:  953:      state->numBuys++;//Increase buys by 1!
    #####:  954:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  955:	int p = 0;//Iterator for hand!
    #####:  956:	int card_not_discarded = 1;//Flag for discard set!
    #####:  957:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  958:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  960:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  961:	    state->discardCount[currentPlayer]++;
    #####:  962:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  963:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  964:	    }
    #####:  965:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  966:	    state->handCount[currentPlayer]--;
    #####:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
    #####:  969:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  970:	    if(DEBUG) {
        -:  971:	      printf("No estate cards in your hand, invalid choice\n");
        -:  972:	      printf("Must gain an estate if there are any\n");
        -:  973:	    }
    #####:  974:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  975:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  976:	      state->supplyCount[estate]--;//Decrement estates
    #####:  977:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  978:		isGameOver(state);
call    0 never executed
        -:  979:	      }
        -:  980:	    }
    #####:  981:	    card_not_discarded = 0;//Exit the loop
        -:  982:	  }
        -:  983:			    
        -:  984:	  else{
    #####:  985:	    p++;//Next card
        -:  986:	  }
        -:  987:	}
        -:  988:      }
        -:  989:			    
        -:  990:      else{
    #####:  991:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  992:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  993:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  994:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  995:	    isGameOver(state);
call    0 never executed
        -:  996:	  }
        -:  997:	}
        -:  998:      }
        -:  999:	    
        -: 1000:      
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case great_hall:
        -: 1004:      //+1 Card
        -: 1005:	  //+1 Actions
        -: 1006:	  //refactored: call greatHallEffect(int currentPlayer, int handPos, struct gameState* state)
    #####: 1007:		if (greatHallEffect(currentPlayer, handPos, state) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1008:		{
    #####: 1009:			return -1;
        -: 1010:		}
        -: 1011:		else
        -: 1012:		{
    #####: 1013:			return 0;
        -: 1014:		}
        -: 1015:		
        -: 1016:    case minion:
        -: 1017:      //+1 action
    #####: 1018:      state->numActions++;
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1022:			
    #####: 1023:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  state->coins = state->coins + 2;
        -: 1026:	}
        -: 1027:			
    #####: 1028:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1029:	{
        -: 1030:	  //discard hand
    #####: 1031:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1032:	    {
    #####: 1033:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1034:	    }
        -: 1035:				
        -: 1036:	  //draw 4
    #####: 1037:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1038:	    {
    #####: 1039:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	    }
        -: 1041:				
        -: 1042:	  //other players discard hand and redraw if hand size > 4
    #####: 1043:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1048:		    {
        -: 1049:		      //discard hand
    #####: 1050:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1051:			{
    #####: 1052:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1053:			}
        -: 1054:							
        -: 1055:		      //draw 4
    #####: 1056:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1057:			{
    #####: 1058:			  drawCard(i, state);
call    0 never executed
        -: 1059:			}
        -: 1060:		    }
        -: 1061:		}
        -: 1062:	    }
        -: 1063:				
        -: 1064:	}
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case steward:
    #####: 1068:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
        -: 1070:	  //+2 cards
    #####: 1071:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1072:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1073:	}
    #####: 1074:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
        -: 1076:	  //+2 coins
    #####: 1077:	  state->coins = state->coins + 2;
        -: 1078:	}
        -: 1079:      else
        -: 1080:	{
        -: 1081:	  //trash 2 cards in hand
    #####: 1082:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1083:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1084:	}
        -: 1085:			
        -: 1086:      //discard card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case tribute:
    #####: 1091:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1092:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1093:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	  state->deckCount[nextPlayer]--;
        -: 1095:	}
    #####: 1096:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1097:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1098:	  state->discardCount[nextPlayer]--;
        -: 1099:	}
        -: 1100:	else{
        -: 1101:	  //No Card to Reveal
        -: 1102:	  if (DEBUG){
        -: 1103:	    printf("No cards to reveal\n");
        -: 1104:	  }
        -: 1105:	}
        -: 1106:      }
        -: 1107:	    
        -: 1108:      else{
    #####: 1109:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1110:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1111:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1112:	    state->deckCount[nextPlayer]++;
    #####: 1113:	    state->discard[nextPlayer][i] = -1;
    #####: 1114:	    state->discardCount[nextPlayer]--;
        -: 1115:	  }
        -: 1116:			    
    #####: 1117:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1118:	} 
    #####: 1119:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1120:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1121:	state->deckCount[nextPlayer]--;
    #####: 1122:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1123:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1124:	state->deckCount[nextPlayer]--;
        -: 1125:      }    
        -: 1126:		       
    #####: 1127:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1128:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1129:	state->playedCardCount++;
    #####: 1130:	tributeRevealedCards[1] = -1;
        -: 1131:      }
        -: 1132:
    #####: 1133:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1134:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1135:	  state->coins += 2;
        -: 1136:	}
        -: 1137:		    
    #####: 1138:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1139:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1140:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1141:	}
        -: 1142:	else{//Action Card
    #####: 1143:	  state->numActions = state->numActions + 2;
        -: 1144:	}
        -: 1145:      }
        -: 1146:	    
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case ambassador:
    #####: 1150:      j = 0;		//used to check if player has enough cards to discard
        -: 1151:
    #####: 1152:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1153:	{
    #####: 1154:	  return -1;				
        -: 1155:	}
        -: 1156:
    #####: 1157:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
    #####: 1162:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:	{
    #####: 1164:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1165:	    {
    #####: 1166:	      j++;
        -: 1167:	    }
        -: 1168:	}
    #####: 1169:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1170:	{
    #####: 1171:	  return -1;				
        -: 1172:	}
        -: 1173:
        -: 1174:      if (DEBUG) 
        -: 1175:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1176:
        -: 1177:      //increase supply count for choosen card by amount being discarded
    #####: 1178:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1179:			
        -: 1180:      //each other player gains a copy of revealed card
    #####: 1181:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1184:	    {
    #####: 1185:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
        -: 1189:      //discard played card from hand
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1191:
        -: 1192:      //trash copies of cards returned to supply
    #####: 1193:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1194:	{
    #####: 1195:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	    {
    #####: 1197:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1198:		{
    #####: 1199:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1200:		  break;
        -: 1201:		}
        -: 1202:	    }
        -: 1203:	}			
        -: 1204:
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case cutpurse:
        -: 1208:
    #####: 1209:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1210:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	{
    #####: 1212:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1213:	    {
    #####: 1214:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1215:		{
    #####: 1216:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1217:		    {
    #####: 1218:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1219:		      break;
        -: 1220:		    }
    #####: 1221:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1222:		    {
    #####: 1223:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1224:			{
        -: 1225:			  if (DEBUG)
        -: 1226:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1227:			}	
    #####: 1228:		      break;
        -: 1229:		    }		
        -: 1230:		}
        -: 1231:					
        -: 1232:	    }
        -: 1233:				
        -: 1234:	}				
        -: 1235:
        -: 1236:      //discard played card from hand
    #####: 1237:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1238:
    #####: 1239:      return 0;
        -: 1240:
        -: 1241:		
        -: 1242:    case embargo: 
        -: 1243:      //+2 Coins
    #####: 1244:      state->coins = state->coins + 2;
        -: 1245:			
        -: 1246:      //see if selected pile is in play
    #####: 1247:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1248:	{
    #####: 1249:	  return -1;
        -: 1250:	}
        -: 1251:			
        -: 1252:      //add embargo token to selected supply pile
    #####: 1253:      state->embargoTokens[choice1]++;
        -: 1254:			
        -: 1255:      //trash card
    #####: 1256:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1257:      return 0;
        -: 1258:		
        -: 1259:    case outpost:
        -: 1260:      //set outpost flag
    #####: 1261:      state->outpostPlayed++;
        -: 1262:			
        -: 1263:      //discard card
    #####: 1264:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:      return 0;
        -: 1266:		
        -: 1267:    case salvager:
        -: 1268:      //+1 buy
    #####: 1269:      state->numBuys++;
        -: 1270:			
    #####: 1271:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1272:	{
        -: 1273:	  //gain coins equal to trashed card
    #####: 1274:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1275:	  //trash card
    #####: 1276:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1277:	}
        -: 1278:			
        -: 1279:      //discard card
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case sea_hag:
    #####: 1284:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1286:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1287:	  state->discardCount[i]++;
    #####: 1288:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1289:	}
        -: 1290:      }
    #####: 1291:      return 0;
        -: 1292:		
        -: 1293:    case treasure_map:
        -: 1294:      //search hand for another treasure_map
    #####: 1295:      index = -1;
    #####: 1296:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1297:	{
    #####: 1298:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1299:	    {
    #####: 1300:	      index = i;
    #####: 1301:	      break;
        -: 1302:	    }
        -: 1303:	}
    #####: 1304:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //trash both treasure cards
    #####: 1307:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1308:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1309:
        -: 1310:	  //gain 4 Gold cards
    #####: 1311:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1312:	    {
    #####: 1313:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1314:	    }
        -: 1315:				
        -: 1316:	  //return success
    #####: 1317:	  return 1;
        -: 1318:	}
        -: 1319:			
        -: 1320:      //no second treasure_map found in hand //Liz asks a QUESTION: what???? this is outside the switch statement. How????
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:	
    #####: 1324:  return -1;
        -: 1325:}
        -: 1326:
        -: 1327:
        -: 1328://LIZ ASKS A QUESTION: So... if the cards that are "discarded" go into the played pile here...
        -: 1329://...then how do any cards get into the discard pile, which would be shuffled back into the
        -: 1330://deck when the deck run out??? Why is there a played pile and a discard pile?
        -: 1331://Why is there a played pile and a discard pile anyway? That isn't in the rules of the card game...?
        -: 1332://PARTIAL ANSWER: Because "discardCard" is for when a card is played and they don't automatically
        -: 1333://go in to the discard pile; they wait until the end of the turn (represente by endTurn function)
        -: 1334://at which point all cards in the player's hand and in the played pile are supposed to go to discards.
        -: 1335://HOWEVER, in the code provided to us, NOTHING HAPPENS TO THE PLAYEDCARDS PILE. I'm not sure if this
        -: 1336://is a design flaw or an intentional change to the game. I'm thinking an error, otherwise, why
        -: 1337://make a distinction between "trash" and "not trash"?
function discardCard called 20 returned 100% blocks executed 78%
       20: 1338:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1339:{
        -: 1340:	
        -: 1341:  //if card is not trashed, added to Played pile 
       20: 1342:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1343:    {
        -: 1344:      //add card to played pile
       20: 1345:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       20: 1346:      state->playedCardCount++;
        -: 1347:    }
        -: 1348:	
        -: 1349:  //set played card to -1
       20: 1350:  state->hand[currentPlayer][handPos] = -1;
        -: 1351:	
        -: 1352:  //remove card from player's hand
       20: 1353:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1354:    {
        -: 1355:      //reduce number of cards in hand
    #####: 1356:      state->handCount[currentPlayer]--;
        -: 1357:    }
       20: 1358:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1359:    {
        -: 1360:      //reduce number of cards in hand
    #####: 1361:      state->handCount[currentPlayer]--;
        -: 1362:    }
        -: 1363:  else 	
        -: 1364:    {
        -: 1365:      //replace discarded card with last card in hand
       20: 1366:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1367:      //set last card to -1
       20: 1368:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1369:      //reduce number of cards in hand
       20: 1370:      state->handCount[currentPlayer]--;
        -: 1371:    }
        -: 1372:	
       20: 1373:  return 0;
        -: 1374:}
        -: 1375:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1376:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1377:{
        -: 1378:  //Note: supplyPos is enum of choosen card
        -: 1379:	
        -: 1380:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1381:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1382:    {
    #####: 1383:      return -1;
        -: 1384:    }
        -: 1385:	
        -: 1386:  //added card for [whoseTurn] current player:
        -: 1387:  // toFlag = 0 : add to discard
        -: 1388:  // toFlag = 1 : add to deck
        -: 1389:  // toFlag = 2 : add to hand
        -: 1390:
    #####: 1391:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1392:    {
    #####: 1393:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1394:      state->deckCount[player]++;
        -: 1395:    }
    #####: 1396:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1397:    {
    #####: 1398:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1399:      state->handCount[player]++;
        -: 1400:    }
        -: 1401:  else
        -: 1402:    {
    #####: 1403:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1404:      state->discardCount[player]++;
        -: 1405:    }
        -: 1406:	
        -: 1407:  //decrease number in supply pile
    #####: 1408:  state->supplyCount[supplyPos]--;
        -: 1409:	 
    #####: 1410:  return 0;
        -: 1411:}
        -: 1412:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1413:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1414:{
        -: 1415:  int i;
        -: 1416:	
        -: 1417:  //reset coin count
    #####: 1418:  state->coins = 0;
        -: 1419:
        -: 1420:  //add coins for each Treasure card in player's hand
    #####: 1421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1424:	{
    #####: 1425:	  state->coins += 1;
        -: 1426:	}
    #####: 1427:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1428:	{
    #####: 1429:	  state->coins += 2;
        -: 1430:	}
    #####: 1431:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1432:	{
    #####: 1433:	  state->coins += 3;
        -: 1434:	}	
        -: 1435:    }	
        -: 1436:
        -: 1437:  //add bonus
    #####: 1438:  state->coins += bonus;
        -: 1439:
    #####: 1440:  return 0;
        -: 1441:}
        -: 1442:
        -: 1443:
        -: 1444://end of dominion.c
        -: 1445:
