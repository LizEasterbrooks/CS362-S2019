Random Test: "smithy" card results:

FAILURE IN TEST #1: FAIL: handCount: handCount: 51/--> expect + 3 - 1: 54
FAILURE IN TEST #1: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (362) + discardCount(472) = 834
After: --> expect three less than before: deckCount (358) + discardCount(472) = 830

FAILURE IN TEST #2: FAIL: handCount: handCount: 30/--> expect + 3 - 1: 33
FAILURE IN TEST #2: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (72) + discardCount(480) = 552
After: --> expect three less than before: deckCount (68) + discardCount(480) = 548

FAILURE IN TEST #3: FAIL: handCount: handCount: 98/--> expect + 3 - 1: 101
FAILURE IN TEST #3: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (80) + discardCount(117) = 197
After: --> expect three less than before: deckCount (76) + discardCount(117) = 193

FAILURE IN TEST #4: FAIL: handCount: handCount: 54/--> expect + 3 - 1: 57
FAILURE IN TEST #4: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (317) + discardCount(252) = 569
After: --> expect three less than before: deckCount (313) + discardCount(252) = 565

FAILURE IN TEST #5: FAIL: handCount: handCount: 188/--> expect + 3 - 1: 191
FAILURE IN TEST #5: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (21) + discardCount(4) = 25
After: --> expect three less than before: deckCount (17) + discardCount(4) = 21

FAILURE IN TEST #6: FAIL: handCount: handCount: 100/--> expect + 3 - 1: 103
FAILURE IN TEST #6: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (385) + discardCount(448) = 833
After: --> expect three less than before: deckCount (381) + discardCount(448) = 829

FAILURE IN TEST #7: FAIL: handCount: handCount: 47/--> expect + 3 - 1: 50
FAILURE IN TEST #7: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (367) + discardCount(149) = 516
After: --> expect three less than before: deckCount (363) + discardCount(149) = 512

FAILURE IN TEST #8: FAIL: handCount: handCount: 196/--> expect + 3 - 1: 199
FAILURE IN TEST #8: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (237) + discardCount(70) = 307
After: --> expect three less than before: deckCount (233) + discardCount(70) = 303

FAILURE IN TEST #9: FAIL: handCount: handCount: 89/--> expect + 3 - 1: 92
FAILURE IN TEST #9: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (444) + discardCount(461) = 905
After: --> expect three less than before: deckCount (440) + discardCount(461) = 901

FAILURE IN TEST #10: FAIL: handCount: handCount: 124/--> expect + 3 - 1: 127
FAILURE IN TEST #10: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (135) + discardCount(423) = 558
After: --> expect three less than before: deckCount (131) + discardCount(423) = 554

FAILURE IN TEST #11: FAIL: handCount: handCount: 155/--> expect + 3 - 1: 158
FAILURE IN TEST #11: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (342) + discardCount(155) = 497
After: --> expect three less than before: deckCount (338) + discardCount(155) = 493

FAILURE IN TEST #12: FAIL: handCount: handCount: 147/--> expect + 3 - 1: 150
FAILURE IN TEST #12: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (490) + discardCount(331) = 821
After: --> expect three less than before: deckCount (486) + discardCount(331) = 817

FAILURE IN TEST #13: FAIL: handCount: handCount: 144/--> expect + 3 - 1: 147
FAILURE IN TEST #13: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (472) + discardCount(226) = 698
After: --> expect three less than before: deckCount (468) + discardCount(226) = 694

FAILURE IN TEST #14: FAIL: handCount: handCount: 84/--> expect + 3 - 1: 87
FAILURE IN TEST #14: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (448) + discardCount(137) = 585
After: --> expect three less than before: deckCount (444) + discardCount(137) = 581

FAILURE IN TEST #15: FAIL: handCount: handCount: 111/--> expect + 3 - 1: 114
FAILURE IN TEST #15: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (282) + discardCount(455) = 737
After: --> expect three less than before: deckCount (278) + discardCount(455) = 733

FAILURE IN TEST #16: FAIL: handCount: handCount: 174/--> expect + 3 - 1: 177
FAILURE IN TEST #16: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (486) + discardCount(0) = 486
After: --> expect three less than before: deckCount (482) + discardCount(0) = 482

FAILURE IN TEST #17: FAIL: handCount: handCount: 178/--> expect + 3 - 1: 181
FAILURE IN TEST #17: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (365) + discardCount(399) = 764
After: --> expect three less than before: deckCount (361) + discardCount(399) = 760

FAILURE IN TEST #18: FAIL: handCount: handCount: 43/--> expect + 3 - 1: 46
FAILURE IN TEST #18: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (108) + discardCount(268) = 376
After: --> expect three less than before: deckCount (104) + discardCount(268) = 372

FAILURE IN TEST #19: FAIL: handCount: handCount: 10/--> expect + 3 - 1: 13
FAILURE IN TEST #19: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (425) + discardCount(149) = 574
After: --> expect three less than before: deckCount (421) + discardCount(149) = 570

FAILURE IN TEST #20: FAIL: handCount: handCount: 190/--> expect + 3 - 1: 193
FAILURE IN TEST #20: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be three more than deckCount + discardCount after
Before: deckCount (26) + discardCount(219) = 245
After: --> expect three less than before: deckCount (22) + discardCount(219) = 241

Random Testing of "Smithy" Card Complete
(NOTE: only failed tests and states printed in results; if no stated failures, all tests passed)

Function 'updateCoins'
Lines executed:0.00% of 11
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.03% of 199
Branches executed:13.77% of 167
Taken at least once:1.80% of 167
Calls executed:3.51% of 57

Function 'cutpurseFunc'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageFunc'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'councilRoomFunc'
Lines executed:0.00% of 8
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 3

Function 'smithyFunc'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'adventurerFunc'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:0.00% of 16
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 2

Function 'initializeGame'
Lines executed:0.00% of 62
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
Calls executed:0.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:0.00% of 6
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:6.47% of 556
Branches executed:7.95% of 415
Taken at least once:2.17% of 415
Calls executed:4.21% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 80 returned 100% blocks executed 38%
       80:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       80:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       80:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       80:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       80:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       80:  576:    state->deckCount[player]--;
       80:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       80:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*Specific card functions added below, part of refactored code for Assignment-2*/
        -:  647:
        -:  648:/*******************************************************************************************************
        -:  649:* Function Name: adventurerFunc
        -:  650:* Function Description: Handles the play of the adventurer card
        -:  651:********************************************************************************************************/
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  652:int adventurerFunc(struct gameState *state, int *drawntreasure, int currentPlayer, int *cardDrawn, int *z, int temphand[]){
    #####:  653:  while(*drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  654:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  655:	    shuffle(currentPlayer, state);
call    0 never executed
        -:  656:	  }
        -:  657:
    #####:  658:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  659:	  *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  660:	  
    #####:  661:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  662:	    *drawntreasure++;
        -:  663:	  else{
    #####:  664:	    temphand[*z]=*cardDrawn;
    #####:  665:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:	    *z++;
        -:  667:	  }
        -:  668:  }
        -:  669:
    #####:  670:  while(*z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  671:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  672:	  *z=*z-1;
        -:  673:  }
        -:  674:
    #####:  675:  return 0;
        -:  676:}
        -:  677:
        -:  678:/*******************************************************************************************************
        -:  679:* Function Name: smithyFunc
        -:  680:* Function Description: Handles the play of the smithy card
        -:  681:********************************************************************************************************/
function smithyFunc called 20 returned 100% blocks executed 100%
       20:  682:int smithyFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  683:  
        -:  684:  //+3 Cards
        -:  685:  int i;
      100:  686:  for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       80:  687:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  688:	}
        -:  689:		
        -:  690:  //discard card from hand
       20:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  692:  
       20:  693:  return 0;
        -:  694:}
        -:  695:
        -:  696:/*******************************************************************************************************
        -:  697:* Function Name: councilRoomFunc
        -:  698:* Function Description: Handles the play of the council room card
        -:  699:********************************************************************************************************/
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  700:int councilRoomFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  701:  
        -:  702:  //+4 Cards
        -:  703:  int i;
    #####:  704:  for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  705:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  706:	}
        -:  707:			
        -:  708:  //+1 Buy
    #####:  709:  state->numBuys++;
        -:  710:			
        -:  711:  //Each other player draws a card
    #####:  712:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  713:	      drawCard(i, state);
call    0 never executed
        -:  714:	}
        -:  715:			
        -:  716:  //put played card in played card pile
    #####:  717:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  718:			
    #####:  719:  return 0;
        -:  720:}
        -:  721:
        -:  722:/*******************************************************************************************************
        -:  723:* Function Name: villageFunc
        -:  724:* Function Description: Handles the play of the village card
        -:  725:********************************************************************************************************/
function villageFunc called 0 returned 0% blocks executed 0%
    #####:  726:int villageFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  727:
        -:  728:  //+1 Card
    #####:  729:  drawCard(currentPlayer, state);
call    0 never executed
        -:  730:			
        -:  731:  //+2 Actions
    #####:  732:  state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:  //discard played card from hand
    #####:  735:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  736:  return 0;
        -:  737:}
        -:  738:
        -:  739:/*******************************************************************************************************
        -:  740:* Function Name: cutpurseFunc
        -:  741:* Function Description: Handles the play of the cutpurse card
        -:  742:********************************************************************************************************/
function cutpurseFunc called 0 returned 0% blocks executed 0%
    #####:  743:int cutpurseFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  744:  
    #####:  745:  updateCoins(currentPlayer, state, 2);
call    0 never executed
        -:  746:  
        -:  747:  //declare iterators
        -:  748:  int i;
        -:  749:  int j;
        -:  750:  int k;
        -:  751:
    #####:  752:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  754:	    for (j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  755:		    if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  756:		      discardCard(j, i, state, 0);
call    0 never executed
        -:  757:		    }
        -:  758:		    
    #####:  759:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  760:		      for (k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  761:			        if (DEBUG)
        -:  762:			          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:			    } 	
    #####:  764:		      break;
        -:  765:		    }		
        -:  766:		  }		
        -:  767:	  }		
        -:  768:	}				
        -:  769:
        -:  770:  //discard played card from hand
    #####:  771:  discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  772:
    #####:  773:  return 0;
        -:  774:
        -:  775:}
        -:  776:
function cardEffect called 20 returned 100% blocks executed 3%
       20:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  778:{
        -:  779:  int i;
        -:  780:  int j;
        -:  781:  //int k; //cutpurse was the only branch of the switch that used k
        -:  782:  int x;
        -:  783:  int index;
       20:  784:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  785:  int nextPlayer = currentPlayer + 1;
        -:  786:
       20:  787:  int tributeRevealedCards[2] = {-1, -1};
        -:  788:  int temphand[MAX_HAND];// moved above the if statement
       20:  789:  int drawntreasure=0;
        -:  790:  int cardDrawn;
       20:  791:  int z = 0;// this is the counter for the temp hand
       20:  792:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        7:  793:    nextPlayer = 0;
        -:  794:  }
        -:  795:  
        -:  796:  //uses switch to select card and perform actions
       20:  797:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  798:    {
        -:  799:    case adventurer:
    #####:  800:      return adventurerFunc(state, &drawntreasure, currentPlayer, &cardDrawn, &z, temphand);
call    0 never executed
        -:  801:
        -:  802:    case council_room:
    #####:  803:      return councilRoomFunc(state, currentPlayer, handPos);
call    0 never executed
        -:  804:
        -:  805:    case feast:
        -:  806:      //gain card with cost up to 5
        -:  807:      //Backup hand
    #####:  808:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  809:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  810:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  811:      }
        -:  812:      //Backup hand
        -:  813:
        -:  814:      //Update Coins for Buy
    #####:  815:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  816:      x = 1;//Condition to loop on
    #####:  817:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  818:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  819:	  if (DEBUG)
        -:  820:	    printf("None of that card left, sorry!\n");
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  824:	  }
        -:  825:	}
    #####:  826:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  831:	  }
        -:  832:	}
        -:  833:	else{
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  837:	  }
        -:  838:
    #####:  839:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  840:	  x = 0;//No more buying cards
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
        -:  846:	}
        -:  847:      }     
        -:  848:
        -:  849:      //Reset Hand
    #####:  850:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  851:	state->hand[currentPlayer][i] = temphand[i];
    #####:  852:	temphand[i] = -1;
        -:  853:      }
        -:  854:      //Reset Hand
        -:  855:      			
    #####:  856:      return 0;
        -:  857:			
        -:  858:    case gardens:
    #####:  859:      return -1;
        -:  860:			
        -:  861:    case mine:
    #####:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  865:	{
    #####:  866:	  return -1;
        -:  867:	}
        -:  868:		
    #####:  869:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  890:	      break;
        -:  891:	    }
        -:  892:	}
        -:  893:			
    #####:  894:      return 0;
        -:  895:			
        -:  896:    case remodel:
    #####:  897:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case smithy:
       20:  922:      return smithyFunc(state, currentPlayer, handPos);
call    0 returned 100%
        -:  923:		
        -:  924:    case village:
    #####:  925:      return villageFunc(state, currentPlayer, handPos);
call    0 never executed
        -:  926:
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:		isGameOver(state);
call    0 never executed
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  970:	    isGameOver(state);
call    0 never executed
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
call    0 never executed
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
        -:  990:      //+1 action
    #####:  991:      state->numActions++;
        -:  992:			
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  995:			
    #####:  996:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:			
    #####: 1001:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1002:	{
        -: 1003:	  //discard hand
    #####: 1004:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1005:	    {
    #####: 1006:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:	    }
        -: 1008:				
        -: 1009:	  //draw 4
    #####: 1010:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	    {
    #####: 1012:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:	    }
        -: 1014:				
        -: 1015:	  //other players discard hand and redraw if hand size > 4
    #####: 1016:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1017:	    {
    #####: 1018:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1019:		{
    #####: 1020:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1021:		    {
        -: 1022:		      //discard hand
    #####: 1023:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1024:			{
    #####: 1025:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1026:			}
        -: 1027:							
        -: 1028:		      //draw 4
    #####: 1029:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1030:			{
    #####: 1031:			  drawCard(i, state);
call    0 never executed
        -: 1032:			}
        -: 1033:		    }
        -: 1034:		}
        -: 1035:	    }
        -: 1036:				
        -: 1037:	}
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case steward:
    #####: 1041:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
        -: 1043:	  //+2 cards
    #####: 1044:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1046:	}
    #####: 1047:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
        -: 1049:	  //+2 coins
    #####: 1050:	  state->coins = state->coins + 2;
        -: 1051:	}
        -: 1052:      else
        -: 1053:	{
        -: 1054:	  //trash 2 cards in hand
    #####: 1055:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1056:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1057:	}
        -: 1058:			
        -: 1059:      //discard card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case tribute:
    #####: 1064:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1065:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1066:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1067:	  state->deckCount[nextPlayer]--;
        -: 1068:	}
    #####: 1069:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1070:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1071:	  state->discardCount[nextPlayer]--;
        -: 1072:	}
        -: 1073:	else{
        -: 1074:	  //No Card to Reveal
        -: 1075:	  if (DEBUG){
        -: 1076:	    printf("No cards to reveal\n");
        -: 1077:	  }
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
        -: 1081:      else{
    #####: 1082:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1084:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1085:	    state->deckCount[nextPlayer]++;
    #####: 1086:	    state->discard[nextPlayer][i] = -1;
    #####: 1087:	    state->discardCount[nextPlayer]--;
        -: 1088:	  }
        -: 1089:			    
    #####: 1090:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1091:	} 
    #####: 1092:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
    #####: 1095:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1096:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1097:	state->deckCount[nextPlayer]--;
        -: 1098:      }    
        -: 1099:		       
    #####: 1100:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1101:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1102:	state->playedCardCount++;
    #####: 1103:	tributeRevealedCards[1] = -1;
        -: 1104:      }
        -: 1105:
    #####: 1106:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1107:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1108:	  state->coins += 2;
        -: 1109:	}
        -: 1110:		    
    #####: 1111:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1112:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1113:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1114:	}
        -: 1115:	else{//Action Card
    #####: 1116:	  state->numActions = state->numActions + 2;
        -: 1117:	}
        -: 1118:      }
        -: 1119:	    
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case ambassador:
    #####: 1123:      j = 0;		//used to check if player has enough cards to discard
        -: 1124:
    #####: 1125:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
    #####: 1130:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  return -1;
        -: 1133:	}
        -: 1134:
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1138:	    {
    #####: 1139:	      j++;
        -: 1140:	    }
        -: 1141:	}
    #####: 1142:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  return -1;				
        -: 1145:	}
        -: 1146:
        -: 1147:      if (DEBUG) 
        -: 1148:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1149:
        -: 1150:      //increase supply count for choosen card by amount being discarded
    #####: 1151:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1152:			
        -: 1153:      //each other player gains a copy of revealed card
    #####: 1154:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1159:	    }
        -: 1160:	}
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1164:
        -: 1165:      //trash copies of cards returned to supply
    #####: 1166:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1169:	    {
    #####: 1170:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1171:		{
    #####: 1172:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1173:		  break;
        -: 1174:		}
        -: 1175:	    }
        -: 1176:	}			
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case cutpurse:
    #####: 1181:      return cutpurseFunc(state, currentPlayer, handPos);
call    0 never executed
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1226:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
function discardCard called 20 returned 100% blocks executed 78%
       20: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
       20: 1272:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1273:    {
        -: 1274:      //add card to played pile
       20: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       20: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
       20: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
       20: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
       20: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
       20: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
       20: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
       20: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
       20: 1303:  return 0;
        -: 1304:}
        -: 1305:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
    #####: 1326:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
    #####: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
    #####: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
    #####: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
    #####: 1351:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1354:	{
    #####: 1355:	  state->coins += 1;
        -: 1356:	}
    #####: 1357:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
    #####: 1361:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
    #####: 1368:  state->coins += bonus;
        -: 1369:
    #####: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
Random Test: "Council Room" card results:

FAILURE IN TEST #1: FAIL: player's handCount: handCount: 63/--> expect + 4 - 1: 67
FAILURE IN TEST #1: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (175) + discardCount(158) = 333
After: --> expect four less than before: deckCount (170) + discardCount(158) = 328

FAILURE IN TEST #2: FAIL: player's handCount: handCount: 4/--> expect + 4 - 1: 8
FAILURE IN TEST #2: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (203) + discardCount(293) = 496
After: --> expect four less than before: deckCount (198) + discardCount(293) = 491

FAILURE IN TEST #3: FAIL: player's handCount: handCount: 50/--> expect + 4 - 1: 54
FAILURE IN TEST #3: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (489) + discardCount(468) = 957
After: --> expect four less than before: deckCount (484) + discardCount(468) = 952

FAILURE IN TEST #4: FAIL: player's handCount: handCount: 194/--> expect + 4 - 1: 198
FAILURE IN TEST #4: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (306) + discardCount(364) = 670
After: --> expect four less than before: deckCount (301) + discardCount(364) = 665

FAILURE IN TEST #5: FAIL: player's handCount: handCount: 41/--> expect + 4 - 1: 45
FAILURE IN TEST #5: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (378) + discardCount(175) = 553
After: --> expect four less than before: deckCount (373) + discardCount(175) = 548

FAILURE IN TEST #6: FAIL: player's handCount: handCount: 97/--> expect + 4 - 1: 101
FAILURE IN TEST #6: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (273) + discardCount(147) = 420
After: --> expect four less than before: deckCount (268) + discardCount(147) = 415

FAILURE IN TEST #7: FAIL: player's handCount: handCount: 21/--> expect + 4 - 1: 25
FAILURE IN TEST #7: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (282) + discardCount(278) = 560
After: --> expect four less than before: deckCount (277) + discardCount(278) = 555

FAILURE IN TEST #8: FAIL: player's handCount: handCount: 72/--> expect + 4 - 1: 76
FAILURE IN TEST #8: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (367) + discardCount(227) = 594
After: --> expect four less than before: deckCount (362) + discardCount(227) = 589

FAILURE IN TEST #9: FAIL: player's handCount: handCount: 92/--> expect + 4 - 1: 96
FAILURE IN TEST #9: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (383) + discardCount(147) = 530
After: --> expect four less than before: deckCount (378) + discardCount(147) = 525

FAILURE IN TEST #10: FAIL: player's handCount: handCount: 183/--> expect + 4 - 1: 187
FAILURE IN TEST #10: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (488) + discardCount(162) = 650
After: --> expect four less than before: deckCount (483) + discardCount(162) = 645

FAILURE IN TEST #11: FAIL: player's handCount: handCount: 47/--> expect + 4 - 1: 51
FAILURE IN TEST #11: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (268) + discardCount(463) = 731
After: --> expect four less than before: deckCount (263) + discardCount(463) = 726

FAILURE IN TEST #12: FAIL: player's handCount: handCount: 30/--> expect + 4 - 1: 34
FAILURE IN TEST #12: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (495) + discardCount(171) = 666
After: --> expect four less than before: deckCount (490) + discardCount(171) = 661

FAILURE IN TEST #13: FAIL: player's handCount: handCount: 128/--> expect + 4 - 1: 132
FAILURE IN TEST #13: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (444) + discardCount(391) = 835
After: --> expect four less than before: deckCount (439) + discardCount(391) = 830

FAILURE IN TEST #14: FAIL: player's handCount: handCount: 96/--> expect + 4 - 1: 100
FAILURE IN TEST #14: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (294) + discardCount(469) = 763
After: --> expect four less than before: deckCount (289) + discardCount(469) = 758

FAILURE IN TEST #15: FAIL: player's handCount: handCount: 76/--> expect + 4 - 1: 80
FAILURE IN TEST #15: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (273) + discardCount(61) = 334
After: --> expect four less than before: deckCount (268) + discardCount(61) = 329

FAILURE IN TEST #16: FAIL: player's handCount: handCount: 116/--> expect + 4 - 1: 120
FAILURE IN TEST #16: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (339) + discardCount(147) = 486
After: --> expect four less than before: deckCount (334) + discardCount(147) = 481

FAILURE IN TEST #17: FAIL: player's handCount: handCount: 146/--> expect + 4 - 1: 150
FAILURE IN TEST #17: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (440) + discardCount(343) = 783
After: --> expect four less than before: deckCount (435) + discardCount(343) = 778

FAILURE IN TEST #18: FAIL: player's handCount: handCount: 46/--> expect + 4 - 1: 50
FAILURE IN TEST #18: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (56) + discardCount(358) = 414
After: --> expect four less than before: deckCount (51) + discardCount(358) = 409

FAILURE IN TEST #19: FAIL: player's handCount: handCount: 87/--> expect + 4 - 1: 91
FAILURE IN TEST #19: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (23) + discardCount(304) = 327
After: --> expect four less than before: deckCount (18) + discardCount(304) = 322

FAILURE IN TEST #20: FAIL: player's handCount: handCount: 177/--> expect + 4 - 1: 181
FAILURE IN TEST #20: FAIL: deck/discard card count:
Explanation: deckCount + discardCount before call should be four more than deckCount + discardCount after
Before: deckCount (480) + discardCount(489) = 969
After: --> expect four less than before: deckCount (475) + discardCount(489) = 964

Random Testing of "Council Room" Card Complete
(NOTE: only failed tests and states printed in results; if no stated failures, all tests passed)

Function 'updateCoins'
Lines executed:0.00% of 11
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.53% of 199
Branches executed:13.77% of 167
Taken at least once:2.40% of 167
Calls executed:5.26% of 57

Function 'cutpurseFunc'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageFunc'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'councilRoomFunc'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 3

Function 'smithyFunc'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'adventurerFunc'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:0.00% of 16
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 2

Function 'initializeGame'
Lines executed:0.00% of 62
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
Calls executed:0.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:0.00% of 6
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:8.09% of 556
Branches executed:8.92% of 415
Taken at least once:3.37% of 415
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 40 returned 100% blocks executed 100%
       40:  346:int whoseTurn(struct gameState *state) {
       40:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 228 returned 100% blocks executed 38%
      228:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      228:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      228:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      228:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      228:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      228:  576:    state->deckCount[player]--;
      228:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      228:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*Specific card functions added below, part of refactored code for Assignment-2*/
        -:  647:
        -:  648:/*******************************************************************************************************
        -:  649:* Function Name: adventurerFunc
        -:  650:* Function Description: Handles the play of the adventurer card
        -:  651:********************************************************************************************************/
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  652:int adventurerFunc(struct gameState *state, int *drawntreasure, int currentPlayer, int *cardDrawn, int *z, int temphand[]){
    #####:  653:  while(*drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  654:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  655:	    shuffle(currentPlayer, state);
call    0 never executed
        -:  656:	  }
        -:  657:
    #####:  658:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  659:	  *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  660:	  
    #####:  661:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  662:	    *drawntreasure++;
        -:  663:	  else{
    #####:  664:	    temphand[*z]=*cardDrawn;
    #####:  665:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:	    *z++;
        -:  667:	  }
        -:  668:  }
        -:  669:
    #####:  670:  while(*z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  671:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  672:	  *z=*z-1;
        -:  673:  }
        -:  674:
    #####:  675:  return 0;
        -:  676:}
        -:  677:
        -:  678:/*******************************************************************************************************
        -:  679:* Function Name: smithyFunc
        -:  680:* Function Description: Handles the play of the smithy card
        -:  681:********************************************************************************************************/
function smithyFunc called 20 returned 100% blocks executed 100%
       20:  682:int smithyFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  683:  
        -:  684:  //+3 Cards
        -:  685:  int i;
      100:  686:  for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       80:  687:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  688:	}
        -:  689:		
        -:  690:  //discard card from hand
       20:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  692:  
       20:  693:  return 0;
        -:  694:}
        -:  695:
        -:  696:/*******************************************************************************************************
        -:  697:* Function Name: councilRoomFunc
        -:  698:* Function Description: Handles the play of the council room card
        -:  699:********************************************************************************************************/
function councilRoomFunc called 20 returned 100% blocks executed 100%
       20:  700:int councilRoomFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  701:  
        -:  702:  //+4 Cards
        -:  703:  int i;
      100:  704:  for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       80:  705:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  706:	}
        -:  707:			
        -:  708:  //+1 Buy
       20:  709:  state->numBuys++;
        -:  710:			
        -:  711:  //Each other player draws a card
       88:  712:  for (i = 0; i < state->numPlayers; i++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       68:  713:	      drawCard(i, state);
call    0 returned 100%
        -:  714:	}
        -:  715:			
        -:  716:  //put played card in played card pile
       20:  717:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  718:			
       20:  719:  return 0;
        -:  720:}
        -:  721:
        -:  722:/*******************************************************************************************************
        -:  723:* Function Name: villageFunc
        -:  724:* Function Description: Handles the play of the village card
        -:  725:********************************************************************************************************/
function villageFunc called 0 returned 0% blocks executed 0%
    #####:  726:int villageFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  727:
        -:  728:  //+1 Card
    #####:  729:  drawCard(currentPlayer, state);
call    0 never executed
        -:  730:			
        -:  731:  //+2 Actions
    #####:  732:  state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:  //discard played card from hand
    #####:  735:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  736:  return 0;
        -:  737:}
        -:  738:
        -:  739:/*******************************************************************************************************
        -:  740:* Function Name: cutpurseFunc
        -:  741:* Function Description: Handles the play of the cutpurse card
        -:  742:********************************************************************************************************/
function cutpurseFunc called 0 returned 0% blocks executed 0%
    #####:  743:int cutpurseFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  744:  
    #####:  745:  updateCoins(currentPlayer, state, 2);
call    0 never executed
        -:  746:  
        -:  747:  //declare iterators
        -:  748:  int i;
        -:  749:  int j;
        -:  750:  int k;
        -:  751:
    #####:  752:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  754:	    for (j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  755:		    if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  756:		      discardCard(j, i, state, 0);
call    0 never executed
        -:  757:		    }
        -:  758:		    
    #####:  759:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  760:		      for (k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  761:			        if (DEBUG)
        -:  762:			          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:			    } 	
    #####:  764:		      break;
        -:  765:		    }		
        -:  766:		  }		
        -:  767:	  }		
        -:  768:	}				
        -:  769:
        -:  770:  //discard played card from hand
    #####:  771:  discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  772:
    #####:  773:  return 0;
        -:  774:
        -:  775:}
        -:  776:
function cardEffect called 40 returned 100% blocks executed 4%
       40:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  778:{
        -:  779:  int i;
        -:  780:  int j;
        -:  781:  //int k; //cutpurse was the only branch of the switch that used k
        -:  782:  int x;
        -:  783:  int index;
       40:  784:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       40:  785:  int nextPlayer = currentPlayer + 1;
        -:  786:
       40:  787:  int tributeRevealedCards[2] = {-1, -1};
        -:  788:  int temphand[MAX_HAND];// moved above the if statement
       40:  789:  int drawntreasure=0;
        -:  790:  int cardDrawn;
       40:  791:  int z = 0;// this is the counter for the temp hand
       40:  792:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
       15:  793:    nextPlayer = 0;
        -:  794:  }
        -:  795:  
        -:  796:  //uses switch to select card and perform actions
       40:  797:  switch( card ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  798:    {
        -:  799:    case adventurer:
    #####:  800:      return adventurerFunc(state, &drawntreasure, currentPlayer, &cardDrawn, &z, temphand);
call    0 never executed
        -:  801:
        -:  802:    case council_room:
       20:  803:      return councilRoomFunc(state, currentPlayer, handPos);
call    0 returned 100%
        -:  804:
        -:  805:    case feast:
        -:  806:      //gain card with cost up to 5
        -:  807:      //Backup hand
    #####:  808:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  809:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  810:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  811:      }
        -:  812:      //Backup hand
        -:  813:
        -:  814:      //Update Coins for Buy
    #####:  815:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  816:      x = 1;//Condition to loop on
    #####:  817:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  818:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  819:	  if (DEBUG)
        -:  820:	    printf("None of that card left, sorry!\n");
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  824:	  }
        -:  825:	}
    #####:  826:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  831:	  }
        -:  832:	}
        -:  833:	else{
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  837:	  }
        -:  838:
    #####:  839:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  840:	  x = 0;//No more buying cards
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
        -:  846:	}
        -:  847:      }     
        -:  848:
        -:  849:      //Reset Hand
    #####:  850:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  851:	state->hand[currentPlayer][i] = temphand[i];
    #####:  852:	temphand[i] = -1;
        -:  853:      }
        -:  854:      //Reset Hand
        -:  855:      			
    #####:  856:      return 0;
        -:  857:			
        -:  858:    case gardens:
    #####:  859:      return -1;
        -:  860:			
        -:  861:    case mine:
    #####:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  865:	{
    #####:  866:	  return -1;
        -:  867:	}
        -:  868:		
    #####:  869:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  890:	      break;
        -:  891:	    }
        -:  892:	}
        -:  893:			
    #####:  894:      return 0;
        -:  895:			
        -:  896:    case remodel:
    #####:  897:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case smithy:
       20:  922:      return smithyFunc(state, currentPlayer, handPos);
call    0 returned 100%
        -:  923:		
        -:  924:    case village:
    #####:  925:      return villageFunc(state, currentPlayer, handPos);
call    0 never executed
        -:  926:
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:		isGameOver(state);
call    0 never executed
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  970:	    isGameOver(state);
call    0 never executed
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
call    0 never executed
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
        -:  990:      //+1 action
    #####:  991:      state->numActions++;
        -:  992:			
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  995:			
    #####:  996:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:			
    #####: 1001:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1002:	{
        -: 1003:	  //discard hand
    #####: 1004:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1005:	    {
    #####: 1006:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:	    }
        -: 1008:				
        -: 1009:	  //draw 4
    #####: 1010:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	    {
    #####: 1012:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:	    }
        -: 1014:				
        -: 1015:	  //other players discard hand and redraw if hand size > 4
    #####: 1016:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1017:	    {
    #####: 1018:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1019:		{
    #####: 1020:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1021:		    {
        -: 1022:		      //discard hand
    #####: 1023:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1024:			{
    #####: 1025:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1026:			}
        -: 1027:							
        -: 1028:		      //draw 4
    #####: 1029:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1030:			{
    #####: 1031:			  drawCard(i, state);
call    0 never executed
        -: 1032:			}
        -: 1033:		    }
        -: 1034:		}
        -: 1035:	    }
        -: 1036:				
        -: 1037:	}
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case steward:
    #####: 1041:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
        -: 1043:	  //+2 cards
    #####: 1044:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1046:	}
    #####: 1047:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
        -: 1049:	  //+2 coins
    #####: 1050:	  state->coins = state->coins + 2;
        -: 1051:	}
        -: 1052:      else
        -: 1053:	{
        -: 1054:	  //trash 2 cards in hand
    #####: 1055:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1056:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1057:	}
        -: 1058:			
        -: 1059:      //discard card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case tribute:
    #####: 1064:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1065:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1066:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1067:	  state->deckCount[nextPlayer]--;
        -: 1068:	}
    #####: 1069:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1070:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1071:	  state->discardCount[nextPlayer]--;
        -: 1072:	}
        -: 1073:	else{
        -: 1074:	  //No Card to Reveal
        -: 1075:	  if (DEBUG){
        -: 1076:	    printf("No cards to reveal\n");
        -: 1077:	  }
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
        -: 1081:      else{
    #####: 1082:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1084:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1085:	    state->deckCount[nextPlayer]++;
    #####: 1086:	    state->discard[nextPlayer][i] = -1;
    #####: 1087:	    state->discardCount[nextPlayer]--;
        -: 1088:	  }
        -: 1089:			    
    #####: 1090:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1091:	} 
    #####: 1092:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
    #####: 1095:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1096:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1097:	state->deckCount[nextPlayer]--;
        -: 1098:      }    
        -: 1099:		       
    #####: 1100:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1101:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1102:	state->playedCardCount++;
    #####: 1103:	tributeRevealedCards[1] = -1;
        -: 1104:      }
        -: 1105:
    #####: 1106:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1107:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1108:	  state->coins += 2;
        -: 1109:	}
        -: 1110:		    
    #####: 1111:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1112:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1113:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1114:	}
        -: 1115:	else{//Action Card
    #####: 1116:	  state->numActions = state->numActions + 2;
        -: 1117:	}
        -: 1118:      }
        -: 1119:	    
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case ambassador:
    #####: 1123:      j = 0;		//used to check if player has enough cards to discard
        -: 1124:
    #####: 1125:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
    #####: 1130:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  return -1;
        -: 1133:	}
        -: 1134:
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1138:	    {
    #####: 1139:	      j++;
        -: 1140:	    }
        -: 1141:	}
    #####: 1142:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  return -1;				
        -: 1145:	}
        -: 1146:
        -: 1147:      if (DEBUG) 
        -: 1148:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1149:
        -: 1150:      //increase supply count for choosen card by amount being discarded
    #####: 1151:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1152:			
        -: 1153:      //each other player gains a copy of revealed card
    #####: 1154:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1159:	    }
        -: 1160:	}
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1164:
        -: 1165:      //trash copies of cards returned to supply
    #####: 1166:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1169:	    {
    #####: 1170:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1171:		{
    #####: 1172:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1173:		  break;
        -: 1174:		}
        -: 1175:	    }
        -: 1176:	}			
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case cutpurse:
    #####: 1181:      return cutpurseFunc(state, currentPlayer, handPos);
call    0 never executed
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1226:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
function discardCard called 40 returned 100% blocks executed 78%
       40: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
       40: 1272:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1273:    {
        -: 1274:      //add card to played pile
       40: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
       40: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
       40: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
       40: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
       40: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
       40: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
       40: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
       40: 1303:  return 0;
        -: 1304:}
        -: 1305:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
    #####: 1326:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
    #####: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
    #####: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
    #####: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
    #####: 1351:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1354:	{
    #####: 1355:	  state->coins += 1;
        -: 1356:	}
    #####: 1357:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
    #####: 1361:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
    #####: 1368:  state->coins += bonus;
        -: 1369:
    #####: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
Random Test: "Adventurer" card results:

(WARNING: randomAdventurerTest function not complete; randomtestcard3.c compiles but WILL NOT run tests!!

Function 'updateCoins'
Lines executed:0.00% of 11
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.53% of 199
Branches executed:13.77% of 167
Taken at least once:2.40% of 167
Calls executed:5.26% of 57

Function 'cutpurseFunc'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageFunc'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'councilRoomFunc'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 3

Function 'smithyFunc'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'adventurerFunc'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:0.00% of 16
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 2

Function 'initializeGame'
Lines executed:0.00% of 62
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
Calls executed:0.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:0.00% of 6
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:8.09% of 556
Branches executed:8.92% of 415
Taken at least once:3.37% of 415
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 40 returned 100% blocks executed 100%
       40:  346:int whoseTurn(struct gameState *state) {
       40:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 228 returned 100% blocks executed 38%
      228:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      228:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      228:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      228:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      228:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      228:  576:    state->deckCount[player]--;
      228:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      228:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*Specific card functions added below, part of refactored code for Assignment-2*/
        -:  647:
        -:  648:/*******************************************************************************************************
        -:  649:* Function Name: adventurerFunc
        -:  650:* Function Description: Handles the play of the adventurer card
        -:  651:********************************************************************************************************/
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  652:int adventurerFunc(struct gameState *state, int *drawntreasure, int currentPlayer, int *cardDrawn, int *z, int temphand[]){
    #####:  653:  while(*drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  654:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  655:	    shuffle(currentPlayer, state);
call    0 never executed
        -:  656:	  }
        -:  657:
    #####:  658:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  659:	  *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  660:	  
    #####:  661:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  662:	    *drawntreasure++;
        -:  663:	  else{
    #####:  664:	    temphand[*z]=*cardDrawn;
    #####:  665:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:	    *z++;
        -:  667:	  }
        -:  668:  }
        -:  669:
    #####:  670:  while(*z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  671:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  672:	  *z=*z-1;
        -:  673:  }
        -:  674:
    #####:  675:  return 0;
        -:  676:}
        -:  677:
        -:  678:/*******************************************************************************************************
        -:  679:* Function Name: smithyFunc
        -:  680:* Function Description: Handles the play of the smithy card
        -:  681:********************************************************************************************************/
function smithyFunc called 20 returned 100% blocks executed 100%
       20:  682:int smithyFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  683:  
        -:  684:  //+3 Cards
        -:  685:  int i;
      100:  686:  for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       80:  687:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  688:	}
        -:  689:		
        -:  690:  //discard card from hand
       20:  691:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  692:  
       20:  693:  return 0;
        -:  694:}
        -:  695:
        -:  696:/*******************************************************************************************************
        -:  697:* Function Name: councilRoomFunc
        -:  698:* Function Description: Handles the play of the council room card
        -:  699:********************************************************************************************************/
function councilRoomFunc called 20 returned 100% blocks executed 100%
       20:  700:int councilRoomFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  701:  
        -:  702:  //+4 Cards
        -:  703:  int i;
      100:  704:  for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       80:  705:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  706:	}
        -:  707:			
        -:  708:  //+1 Buy
       20:  709:  state->numBuys++;
        -:  710:			
        -:  711:  //Each other player draws a card
       88:  712:  for (i = 0; i < state->numPlayers; i++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       68:  713:	      drawCard(i, state);
call    0 returned 100%
        -:  714:	}
        -:  715:			
        -:  716:  //put played card in played card pile
       20:  717:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  718:			
       20:  719:  return 0;
        -:  720:}
        -:  721:
        -:  722:/*******************************************************************************************************
        -:  723:* Function Name: villageFunc
        -:  724:* Function Description: Handles the play of the village card
        -:  725:********************************************************************************************************/
function villageFunc called 0 returned 0% blocks executed 0%
    #####:  726:int villageFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  727:
        -:  728:  //+1 Card
    #####:  729:  drawCard(currentPlayer, state);
call    0 never executed
        -:  730:			
        -:  731:  //+2 Actions
    #####:  732:  state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:  //discard played card from hand
    #####:  735:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  736:  return 0;
        -:  737:}
        -:  738:
        -:  739:/*******************************************************************************************************
        -:  740:* Function Name: cutpurseFunc
        -:  741:* Function Description: Handles the play of the cutpurse card
        -:  742:********************************************************************************************************/
function cutpurseFunc called 0 returned 0% blocks executed 0%
    #####:  743:int cutpurseFunc(struct gameState * state, int currentPlayer, int handPos){
        -:  744:  
    #####:  745:  updateCoins(currentPlayer, state, 2);
call    0 never executed
        -:  746:  
        -:  747:  //declare iterators
        -:  748:  int i;
        -:  749:  int j;
        -:  750:  int k;
        -:  751:
    #####:  752:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  754:	    for (j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  755:		    if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  756:		      discardCard(j, i, state, 0);
call    0 never executed
        -:  757:		    }
        -:  758:		    
    #####:  759:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  760:		      for (k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  761:			        if (DEBUG)
        -:  762:			          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:			    } 	
    #####:  764:		      break;
        -:  765:		    }		
        -:  766:		  }		
        -:  767:	  }		
        -:  768:	}				
        -:  769:
        -:  770:  //discard played card from hand
    #####:  771:  discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  772:
    #####:  773:  return 0;
        -:  774:
        -:  775:}
        -:  776:
function cardEffect called 40 returned 100% blocks executed 4%
       40:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  778:{
        -:  779:  int i;
        -:  780:  int j;
        -:  781:  //int k; //cutpurse was the only branch of the switch that used k
        -:  782:  int x;
        -:  783:  int index;
       40:  784:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       40:  785:  int nextPlayer = currentPlayer + 1;
        -:  786:
       40:  787:  int tributeRevealedCards[2] = {-1, -1};
        -:  788:  int temphand[MAX_HAND];// moved above the if statement
       40:  789:  int drawntreasure=0;
        -:  790:  int cardDrawn;
       40:  791:  int z = 0;// this is the counter for the temp hand
       40:  792:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
       15:  793:    nextPlayer = 0;
        -:  794:  }
        -:  795:  
        -:  796:  //uses switch to select card and perform actions
       40:  797:  switch( card ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  798:    {
        -:  799:    case adventurer:
    #####:  800:      return adventurerFunc(state, &drawntreasure, currentPlayer, &cardDrawn, &z, temphand);
call    0 never executed
        -:  801:
        -:  802:    case council_room:
       20:  803:      return councilRoomFunc(state, currentPlayer, handPos);
call    0 returned 100%
        -:  804:
        -:  805:    case feast:
        -:  806:      //gain card with cost up to 5
        -:  807:      //Backup hand
    #####:  808:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  809:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  810:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  811:      }
        -:  812:      //Backup hand
        -:  813:
        -:  814:      //Update Coins for Buy
    #####:  815:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  816:      x = 1;//Condition to loop on
    #####:  817:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  818:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  819:	  if (DEBUG)
        -:  820:	    printf("None of that card left, sorry!\n");
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  824:	  }
        -:  825:	}
    #####:  826:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  831:	  }
        -:  832:	}
        -:  833:	else{
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  837:	  }
        -:  838:
    #####:  839:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  840:	  x = 0;//No more buying cards
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
        -:  846:	}
        -:  847:      }     
        -:  848:
        -:  849:      //Reset Hand
    #####:  850:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  851:	state->hand[currentPlayer][i] = temphand[i];
    #####:  852:	temphand[i] = -1;
        -:  853:      }
        -:  854:      //Reset Hand
        -:  855:      			
    #####:  856:      return 0;
        -:  857:			
        -:  858:    case gardens:
    #####:  859:      return -1;
        -:  860:			
        -:  861:    case mine:
    #####:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  865:	{
    #####:  866:	  return -1;
        -:  867:	}
        -:  868:		
    #####:  869:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  890:	      break;
        -:  891:	    }
        -:  892:	}
        -:  893:			
    #####:  894:      return 0;
        -:  895:			
        -:  896:    case remodel:
    #####:  897:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case smithy:
       20:  922:      return smithyFunc(state, currentPlayer, handPos);
call    0 returned 100%
        -:  923:		
        -:  924:    case village:
    #####:  925:      return villageFunc(state, currentPlayer, handPos);
call    0 never executed
        -:  926:
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:		isGameOver(state);
call    0 never executed
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  970:	    isGameOver(state);
call    0 never executed
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
call    0 never executed
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
        -:  990:      //+1 action
    #####:  991:      state->numActions++;
        -:  992:			
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  995:			
    #####:  996:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:			
    #####: 1001:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1002:	{
        -: 1003:	  //discard hand
    #####: 1004:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1005:	    {
    #####: 1006:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:	    }
        -: 1008:				
        -: 1009:	  //draw 4
    #####: 1010:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	    {
    #####: 1012:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:	    }
        -: 1014:				
        -: 1015:	  //other players discard hand and redraw if hand size > 4
    #####: 1016:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1017:	    {
    #####: 1018:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1019:		{
    #####: 1020:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1021:		    {
        -: 1022:		      //discard hand
    #####: 1023:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1024:			{
    #####: 1025:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1026:			}
        -: 1027:							
        -: 1028:		      //draw 4
    #####: 1029:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1030:			{
    #####: 1031:			  drawCard(i, state);
call    0 never executed
        -: 1032:			}
        -: 1033:		    }
        -: 1034:		}
        -: 1035:	    }
        -: 1036:				
        -: 1037:	}
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case steward:
    #####: 1041:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
        -: 1043:	  //+2 cards
    #####: 1044:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1046:	}
    #####: 1047:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
        -: 1049:	  //+2 coins
    #####: 1050:	  state->coins = state->coins + 2;
        -: 1051:	}
        -: 1052:      else
        -: 1053:	{
        -: 1054:	  //trash 2 cards in hand
    #####: 1055:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1056:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1057:	}
        -: 1058:			
        -: 1059:      //discard card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case tribute:
    #####: 1064:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1065:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1066:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1067:	  state->deckCount[nextPlayer]--;
        -: 1068:	}
    #####: 1069:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1070:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1071:	  state->discardCount[nextPlayer]--;
        -: 1072:	}
        -: 1073:	else{
        -: 1074:	  //No Card to Reveal
        -: 1075:	  if (DEBUG){
        -: 1076:	    printf("No cards to reveal\n");
        -: 1077:	  }
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
        -: 1081:      else{
    #####: 1082:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1083:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1084:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1085:	    state->deckCount[nextPlayer]++;
    #####: 1086:	    state->discard[nextPlayer][i] = -1;
    #####: 1087:	    state->discardCount[nextPlayer]--;
        -: 1088:	  }
        -: 1089:			    
    #####: 1090:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1091:	} 
    #####: 1092:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
    #####: 1095:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1096:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1097:	state->deckCount[nextPlayer]--;
        -: 1098:      }    
        -: 1099:		       
    #####: 1100:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1101:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1102:	state->playedCardCount++;
    #####: 1103:	tributeRevealedCards[1] = -1;
        -: 1104:      }
        -: 1105:
    #####: 1106:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1107:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1108:	  state->coins += 2;
        -: 1109:	}
        -: 1110:		    
    #####: 1111:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1112:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1113:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1114:	}
        -: 1115:	else{//Action Card
    #####: 1116:	  state->numActions = state->numActions + 2;
        -: 1117:	}
        -: 1118:      }
        -: 1119:	    
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case ambassador:
    #####: 1123:      j = 0;		//used to check if player has enough cards to discard
        -: 1124:
    #####: 1125:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
    #####: 1130:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  return -1;
        -: 1133:	}
        -: 1134:
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1138:	    {
    #####: 1139:	      j++;
        -: 1140:	    }
        -: 1141:	}
    #####: 1142:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  return -1;				
        -: 1145:	}
        -: 1146:
        -: 1147:      if (DEBUG) 
        -: 1148:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1149:
        -: 1150:      //increase supply count for choosen card by amount being discarded
    #####: 1151:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1152:			
        -: 1153:      //each other player gains a copy of revealed card
    #####: 1154:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1159:	    }
        -: 1160:	}
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1164:
        -: 1165:      //trash copies of cards returned to supply
    #####: 1166:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1169:	    {
    #####: 1170:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1171:		{
    #####: 1172:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1173:		  break;
        -: 1174:		}
        -: 1175:	    }
        -: 1176:	}			
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case cutpurse:
    #####: 1181:      return cutpurseFunc(state, currentPlayer, handPos);
call    0 never executed
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1226:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
function discardCard called 40 returned 100% blocks executed 78%
       40: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
       40: 1272:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1273:    {
        -: 1274:      //add card to played pile
       40: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
       40: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
       40: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
       40: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
       40: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
       40: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
       40: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
       40: 1303:  return 0;
        -: 1304:}
        -: 1305:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
    #####: 1326:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
    #####: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
    #####: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
    #####: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
    #####: 1351:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1354:	{
    #####: 1355:	  state->coins += 1;
        -: 1356:	}
    #####: 1357:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
    #####: 1361:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
    #####: 1368:  state->coins += bonus;
        -: 1369:
    #####: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
